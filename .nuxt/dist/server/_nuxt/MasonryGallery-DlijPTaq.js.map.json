{"file":"MasonryGallery-DlijPTaq.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAIA,UAAM,UAAU,IAAI,IAAI;AACxB,UAAM,QAAQ,SAAU;AACxB,UAAM,WAAW,MAAM,YAAY,MAAM,UAAU,CAAC,EAAE,WAAW;AAC5C,eAAW,SAAS,CAAC,EAAE,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQnD,UAAM,QAAQ;AAQd,UAAM,OAAO;AAKP,UAAA,EAAE,aAAa,OAAO,KAAK,KAAK,YAAY,gBAAA,IAChD,OAAO,KAAK;AACR,UAAA,UAAU,IAAc,EAAE;AAChC,UAAM,OAAO,IAAoB;AAEjC,aAAS,cAAsB;AAC7B,YAAM,QAAQ,KAAK;AAAA,SAChB,KAAK,MAAM,sBAAsB,EAAE,QAAQ,IAAI,UAC7C,YAAY,QAAQ,IAAI;AAAA,MAC7B;AACO,aAAA,QAAQ,IAAI,QAAQ;AAAA,IAAA;AAG7B,aAAS,cAAc,OAAyB;AACvC,aAAA,CAAC,GAAG,IAAI,MAAM,KAAK,CAAC,EAAE,IAAI,MAAM,EAAE;AAAA,IAAA;AAGvC,QAAA,WAAW,QAAQ,GAAG;AAClB,YAAA,aAAa,cAAc,WAAW,KAAK;AACjD,YAAM,MAAM;AAAA,QAAQ,CAAC,GAAY,MAC/B,WAAW,IAAI,WAAW,KAAK,EAAG,KAAK,CAAC;AAAA,MAC1C;AACA,cAAQ,QAAQ;AAAA,IAAA;AAGlB,mBAAe,YAAY,WAAmB;AACxC,UAAA,aAAa,MAAM,MAAM,QAAQ;AACnC;AAAA,MAAA;AAEF,YAAM,SAAS;AACf,YAAM,aAAa,CAAC,GAAG,KAAK,MAAM,QAAQ;AAC1C,UAAI,IAAI,OAAO;AACb,mBAAW,QAAQ;AAAA,MAAA;AAErB,YAAM,SAAS,WAAW;AAAA,QAAO,CAAC,MAAM,SACtC,KAAK,sBAAwB,EAAA,SAAS,KAAK,sBAAA,EAAwB,SAC/D,OACA;AAAA,MACN;AACA,cAAQ,MAAM,CAAC,OAAO,QAAQ,KAAM,EAAG,KAAK,SAAS;AAC/C,YAAA,YAAY,YAAY,CAAC;AAAA,IAAA;AAGlB,mBAAA,OAAO,QAAQ,OAAO;AACnC,UAAI,QAAQ,MAAM,WAAW,YAAY,KAAK,CAAC,OAAO;AACpD,aAAK,YAAY;AACjB;AAAA,MAAA;AAEM,cAAA,QAAQ,cAAc,aAAa;AAC3C,YAAM,eAAe,mDAAiB;AACtC,YAAM,UAAU,eAAe,aAAa,YAAmB,SAAA;AAC/D,YAAM,YAAY,CAAC;AACnB,qBACI,aAAa,SAAS,EAAE,KAAK,UAAU,aAAa,UAAW,CAAA,IACxD,SAAA,SAAS,EAAE,KAAK,SAAS;AACpC,WAAK,QAAQ;AAAA,IAAA;AAIb,WAAO,mBAAmB,cACtB,SACA,IAAI,eAAe,MAAM,OAAQ,CAAA;AAQvC,UAAM,CAAC,OAAO,GAAG,GAAG,MAAM,OAAO,IAAI,CAAC;AACtC,UAAM,CAAC,aAAa,GAAG,GAAG,MAAM,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../components/PhotoSwipe.vue","../../../../components/MasonryWall.vue"],"sourcesContent":["<script setup>\nimport PhotoSwipeLightbox from \"photoswipe/lightbox\";\nimport \"photoswipe/style.css\";\n\nconst gallery = ref(null);\nconst slots = useSlots();\nconst children = slots.default() ? slots.default()[0].children : false;\nconst childrenType = children ? children[0].type : false;\n\nlet lightbox;\n\nonMounted(() => {\n  if (!lightbox && childrenType) {\n    lightbox = new PhotoSwipeLightbox({\n      gallery: gallery.value,\n      children: \"a\",\n      pswpModule: () => import(\"photoswipe\"),\n    });\n    lightbox.init();\n  }\n});\n\nonUnmounted(() => {\n  if (lightbox) {\n    lightbox.destroy();\n    lightbox = null;\n  }\n});\n</script>\n\n<template>\n  <div ref=\"gallery\">\n    <slot />\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport type { Ref } from \"vue\";\nimport { nextTick, onBeforeUnmount, onMounted, ref, toRefs, watch } from \"vue\";\n\ntype Column = number[];\n\ninterface Props {\n  items: unknown[];\n  columnWidth?: number;\n  gap?: number;\n  rtl?: boolean;\n  ssrColumns?: number;\n  scrollContainer?: HTMLElement | null;\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  columnWidth: 400,\n  gap: 0,\n  rtl: false,\n  ssrColumns: 0,\n  scrollContainer: null,\n});\n\nconst emit = defineEmits<{\n  (event: \"redraw\"): void;\n  (event: \"redrawSkip\"): void;\n}>();\n\nconst { columnWidth, items, gap, rtl, ssrColumns, scrollContainer } =\n  toRefs(props);\nconst columns = ref<Column[]>([]);\nconst wall = ref<HTMLDivElement>() as Ref<HTMLDivElement>;\n\nfunction columnCount(): number {\n  const count = Math.floor(\n    (wall.value.getBoundingClientRect().width + gap.value) /\n      (columnWidth.value + gap.value)\n  );\n  return count > 0 ? count : 1;\n}\n\nfunction createColumns(count: number): Column[] {\n  return [...new Array(count)].map(() => []);\n}\n\nif (ssrColumns.value > 0) {\n  const newColumns = createColumns(ssrColumns.value);\n  items.value.forEach((_: unknown, i: number) =>\n    newColumns[i % ssrColumns.value]!.push(i)\n  );\n  columns.value = newColumns;\n}\n\nasync function fillColumns(itemIndex: number) {\n  if (itemIndex >= items.value.length) {\n    return;\n  }\n  await nextTick();\n  const columnDivs = [...wall.value.children] as HTMLDivElement[];\n  if (rtl.value) {\n    columnDivs.reverse();\n  }\n  const target = columnDivs.reduce((prev, curr) =>\n    curr.getBoundingClientRect().height < prev.getBoundingClientRect().height\n      ? curr\n      : prev\n  );\n  columns.value[+target.dataset.index!]!.push(itemIndex);\n  await fillColumns(itemIndex + 1);\n}\n\nasync function redraw(force = false) {\n  if (columns.value.length === columnCount() && !force) {\n    emit(\"redrawSkip\");\n    return;\n  }\n  columns.value = createColumns(columnCount());\n  const scrollTarget = scrollContainer?.value;\n  const scrollY = scrollTarget ? scrollTarget.scrollTop : window.scrollY;\n  await fillColumns(0);\n  scrollTarget\n    ? scrollTarget.scrollBy({ top: scrollY - scrollTarget.scrollTop })\n    : window.scrollTo({ top: scrollY });\n  emit(\"redraw\");\n}\n\nconst resizeObserver =\n  typeof ResizeObserver === \"undefined\"\n    ? undefined\n    : new ResizeObserver(() => redraw());\n\nonMounted(() => {\n  redraw();\n  resizeObserver?.observe(wall.value);\n});\nonBeforeUnmount(() => resizeObserver?.unobserve(wall.value));\n\nwatch([items, rtl], () => redraw(true));\nwatch([columnWidth, gap], () => redraw());\n</script>\n\n<template>\n  <div\n    ref=\"wall\"\n    class=\"masonry-wall\"\n    :style=\"{ display: 'flex', gap: `${gap}px` }\"\n  >\n    <div\n      v-for=\"(column, columnIndex) in columns\"\n      :key=\"columnIndex\"\n      class=\"masonry-column\"\n      :data-index=\"columnIndex\"\n      :style=\"{\n        display: 'flex',\n        'flex-basis': '0px',\n        'flex-direction': 'column',\n        'flex-grow': 1,\n        gap: `${gap}px`,\n        height: ['-webkit-max-content', '-moz-max-content', 'max-content'] as any,\n        'min-width': 0\n      }\"\n    >\n      <div v-for=\"itemIndex in column\" :key=\"itemIndex\" class=\"masonry-item\">\n        <slot :item=\"items[itemIndex]\" :index=\"itemIndex\">\n          {{ items[itemIndex] }}\n        </slot>\n      </div>\n    </div>\n  </div>\n</template>\n"],"version":3}